#! /usr/bin/env python

"""
runcli.Runfile
==============
Runfile for managing the runcli project.
"""

import argparse
import logging
import os
import subprocess


logger = logging.getLogger(__name__)

# config logging
logging.basicConfig()
logger.setLevel(logging.INFO)


BASE_DIR = os.path.abspath(os.path.dirname(__file__))


def mkenv():
    """Build the development environment.

    :returns: None.
    """
    subprocess.check_call(
        "docker build -t runcli-dev .",
        shell=True)


def exc(args):
    """Execute a command in the development environment.

    :param str args: the arguments to execute in the development
    environment.

    :returns: None.
    """
    mkenv()

    subprocess.check_call(
        "docker run runcli-dev {args}".format(args=' '.join(args)),
        shell=True)


def shell():
    """Open a shell in the development environment's docker container."""
    mkenv()

    subprocess.check_call(
        "docker run -it runcli-dev",
        shell=True)


def test():
    """Run tests for the project.

    :returns: None.
    """
    mkenv()

    logger.info("Running python 2.7 tests.")
    subprocess.check_call(
        "docker run runcli-dev python -m unittest discover /root/runcli",
        shell=True)

    logger.info("Running python 3 tests.")
    subprocess.check_call(
        "docker run runcli-dev python3 -m unittest discover /root/runcli",
        shell=True)


def build():
    """Build a distributable version of the package.

    :returns: None.
    """
    test()

    logger.info("Building package.")
    subprocess.check_call(
        "docker run"
        " -v {base_dir}:/work"
        " -w /work"
        " runcli-dev python /work/setup.py sdist".format(
            base_dir=BASE_DIR),
        shell=True)
    subprocess.check_call(
        "docker run"
        " -v {base_dir}:/work"
        " -w /work"
        " runcli-dev python /work/setup.py bdist_wheel --universal".format(
            base_dir=BASE_DIR),
        shell=True)


def build_parser():
    """Return an ArgumentParser for runcli.Runfile.

    :returns: an argparse.ArgumentParser for parsing command line
    arguments for runcli.Runfile.
    """
    parser = argparse.ArgumentParser(
        description="Common operations for developing ``runcli``.")

    subparsers = parser.add_subparsers(dest="subcommand")

    mkenv_parser = subparsers.add_parser(
        'mkenv',
        help=mkenv.__doc__.split('\n')[0])

    exc_parser = subparsers.add_parser(
        'exc',
        help=exc.__doc__.split('\n')[0])
    exc_parser.add_argument(
        'args',
        nargs='+')

    shell_parser = subparsers.add_parser(
        'shell',
        help=shell.__doc__.split('\n')[0])

    test_parser = subparsers.add_parser(
        'test',
        help=test.__doc__.split('\n')[0])

    build_parser = subparsers.add_parser(
        'build',
        help=build.__doc__.split('\n')[0])

    return parser


def main(subcommand, **kwargs):
    """Execute common commands for developing runcli.

    :param str subcommand: the subcommand to execute.
    :param dict kwargs: the key word arguments for the various
    subcommands.

    :returns: None.
    """
    if subcommand == 'mkenv':
        mkenv(**kwargs)
    elif subcommand == 'exc':
        exc(**kwargs)
    elif subcommand == 'shell':
        shell(**kwargs)
    elif subcommand == 'test':
        test(**kwargs)
    elif subcommand == 'build':
        build(**kwargs)
    else:
        raise ValueError(
            "Invalid value passed for subcommand")


if __name__ == '__main__':
    args = build_parser().parse_args()

    main(**vars(args))
